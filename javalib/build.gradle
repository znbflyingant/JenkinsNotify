apply plugin: 'java-library'
apply plugin: 'kotlin'
ext{
    kotlin_version = '1.3.61'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'org.apache.httpcomponents:httpclient:4.5.12'
    implementation 'org.apache.httpcomponents:httpcore:4.4.13'
    implementation 'org.apache.httpcomponents:httpmime:4.5.6'
    implementation 'org.apache.logging.log4j:log4j:2.11.2'
    implementation 'org.apache.commons:commons-lang3:3.0'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.google.zxing:core:3.3.0'
    implementation 'com.google.zxing:javase:3.3.0'
}
sourceCompatibility = "7"
targetCompatibility = "7"

jar {
    manifest {
        attributes 'Main-Class': 'com.znb.javalib.Test'
    }
    // This line of code recursively collects and copies all of a project's files
    // and adds them to the JAR itself. One can extend this task, to skip certain
    // files or particular types at will
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}

def cleanTempFiles() {
    println("cleanTempFiles")
    FileTree tree = fileTree("archive")
    tree.visit {
        element ->
            delete element.file
    }
}
task generateJarTask(type: Copy) {
    doFirst {
        cleanTempFiles()
        print("doFirst generateJarTask")
    }

    from('./build/libs/')
    into('./archive/')
    include('javalib.jar')
    rename ('javalib.jar','autosendbuild.jar')
    doLast {
        print("doLast generateJarTask")
    }
}
generateJarTask.dependsOn(':javalib:build')







